import json, httpx, logging
from fastapi import APIRouter

from app.clients.bedrock import get_bedrock_client
from app.models import UserPreferences
from app.utils import truncate_json, get_bedrock_usage
from app.config import settings
from app.llm.suggestions import SYSTEM_PROMPT

logger = logging.getLogger(__name__)
router = APIRouter()
bedrock = get_bedrock_client()

@router.post("/suggestions")
async def suggestions_from_ai(user_preferences: UserPreferences):
    context = await fetch_sw_context(user_preferences)

    initial_payload = {
        "anthropic_version": "bedrock-2023-05-31",
        "system": SYSTEM_PROMPT,
        "messages": [
            {
                "role": "user",
                "content": [
                    {
                        "type": "text",
                        "text": (
                            f"Hereâ€™s what I know about the user preferences:\n\n"
                            f"{json.dumps(context)}\n\n"
                            f"Now, give me suggestions of questions."
                        )
                    }
                ]
            }
        ],
        "max_tokens": settings.max_tokens
    }

    response = bedrock.invoke_model(
        modelId=settings.bedrock_model_id,
        contentType="application/json",
        accept="application/json",
        body=json.dumps(initial_payload)
    )

    raw_body = response["body"].read()
    result = json.loads(raw_body)

    bedrock_usage = get_bedrock_usage(
        model_id=settings.bedrock_model_id,
        input_text=json.dumps(initial_payload["messages"]),
        output_text=json.dumps(result),
        call_type="initial"
    )
    logger.info("Bedrock usage", extra=bedrock_usage)
    
    text_response = next(
        (c["text"] for c in result.get("content", []) if c.get("type") == "text"),
        None
    )

    if not text_response:
        return {
            "error": "No suggestions generated by the AI."
        }

    return {
        "response": text_response,
    }

async def fetch_sw_context(user_preferences):
    async with httpx.AsyncClient() as client:
        async def fetch_category(category, value):
            if value != "":
                resp = await client.get(f"{settings.sw_api_base}/{category}?search={value}")
                return resp.json()
            return {}

        people = await fetch_category("people", user_preferences.people)
        planets = await fetch_category("planets", user_preferences.planets)
        films = await fetch_category("films", user_preferences.films)
        species = await fetch_category("species", user_preferences.species)
        vehicles = await fetch_category("vehicles", user_preferences.vehicles)
        starships = await fetch_category("starships", user_preferences.starships)

    return truncate_json({
        "people": people,
        "films": films,
        "planets": planets,
        "species": species,
        "vehicles": vehicles,
        "starships": starships
    }, limit=10000)